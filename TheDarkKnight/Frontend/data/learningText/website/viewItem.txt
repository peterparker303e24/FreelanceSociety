View Item

General
- The item data is shown at the top of the page.
- Click "Auto Discover Item" to automatically search for the item sequentially through users and their corresponding links in order of their user activation time. Click "Skip Address" to view the links from another user, and click "Skip Link" to view other links from the same user.
- Click "Manually Discover Item" to search for the item through a specific user by their address.
- Click "Save Locally" to download the item zip locally to your computer if the item data has been discovered.
- Click "Upload Locally" to upload the item data to view.
- Click the buttons on the sidebar to the right to redirect to the corresponding page.
- View the item file tree when the item has been discovered.

View Double Hash Task
- The Task ID shows the unique shortened task identifier for the selected task. "dh" is shortened for double hash task
- The "Hash Value" is the keccak256 hash of the keccak256 hash of the 32 bytes task key. Obtaining this key will allow the user to complete the task.
- The "Task Hash" is the keccak256 hash of the zip file that contains the instructions for the double hash task.
- The "Manager Address" is the address of the user that created the double hash task.
- The "Reward" is the amount, in Wei, that is rewarded to the user that completes the double hash task.
- The "Deadline" is the UTC time when the task no longer accepts first hash submissions. This time is checked in the contract code in reference to the block timestamp where a transaction is made. Users can submit the confirmation hash past this deadline during their second response time window. Users can no longer fund the task past the deadline time. Users who fund a task must wait until all second response windows have passed to be able to withdraw their funds from the task, and only when the task has not been completed.
- The "Completed" tells whether the double hash task has been completed by a user.
- The "Key Reveal" tells whether the manager of the task must reveal the 32 bytes key in order to withdraw their funds of the task. This allows workers to know that the manager is incentivized to reveal the solution of the task so they know whether or not the task would be able to be reasonably completable.
- The "Second Response Window" is the timespan in seconds that the worker is allocated to submit their second response confirmation. In order for the worker to successfully complete the task, they must submit the second response confirmation transaction within the second response window based on the blockchain transaction timestamp. If the worker misses their confirmation response window timespan, then they must submit another first hash response to get a new second response window.
- The "Second Response Delay" is the time in seconds between the time the worker submits their first hash to the start of their timespan window. This parameter in the double hash task allows for blocks to confirm and increase the security of their first hash submission and corresponding second response window timespan.
- The "Response Count" is the number of first hash submissions and second response hash confirmations. There is either 0 or 1 second response hash confirmations since once a second response is confirmed, the task is complete.
- The "Next Slot Time" is the time in UTC that the end of the last second response window timespan is. Any new first hash submission will have a second response window at least after this time, possibly more if the second response window delay pushes it to a further time.
- Input "Fund Task Amount" is the amount, in Wei, that the user will be funding to the task.
- Input "Manager Key Reveal" is the field that displays to the manager of the task if the key reveal for the task is true. This input when taken the keccak256 of the keccak256 hash must result in the task hash value for the manager to be able to withdraw their funds for the task.
- Click "Fund Task" to submit a transaction to the blockchain that will fund the current double hash task with the amount in the "Fund Task Amount" field.
- Click "Withdraw Task Funds" for the user to withdraw all their funds to the task. The user can only withdraw the funds if the task is incomplete and all second response window timespans have passed. If the key reveal value for the task is true, then the manager must reveal the key to the task to be able to withdraw their funds to the task.
- Click "Auto Discover Task" to automatically search for a task sequentially through users and their corresponding links in order of their user activation time. Click "Skip Address" to view the links from another user, and click "Skip Link" to view other links from the same user.
- Click "Manually Discover Task" to search for the task through a specific user by their address.
- View the "Task Requirements" of the list of requirements that must be met in order to complete the double hash task. The requirement ID, condition, and other data are described in each requirement section. The file tree of the task can be seen to the right. Click the toggle to open/close the task description.
- Click "Save Locally" to download the task zip locally to your computer if the task data has been discovered.
- Click "Upload Locally" to upload the task data to view.
- Click "Submit Task" to redirect to the double hash task submission page.
- Click "View Task Submissions" to redirect to the view double hash task submissions page.
- Click "View Double Hash Tasks" to redirect to the task search page, with the double hash task search parameter input.
- Click "Add Double Hash Task" to redirect to the add double hash task page.
- View the task file tree when the double hash task has been discovered.

View Ethics Requirements
- The "Ethics Requirements Version" is determined by a threshold of votes for a proposal. Once the number of votes for some ethics requirements proposal equals a power of two, then that ethics requirements proposal becomes the next iteration in the versions.
- Click "View Ethics Requirements Proposals" to redirect to the ethics requirements proposal search page.
- Click "Add Ethics Requirements Proposal" to redirect to the add ethics requirements proposal page.
- The ethics requirements are a list of strings. Each string should be a requirement that upholds some ethical standard that must be followed by all user content. The democratically voted ethics requirements are necessary to incentivize ethical users to participate Freelance Society to create a more competitive and efficient platform. Since users are anonymous, "democratic" does not mean each individual gets a vote, but that each user gets a vote. Since an individual can control multiple users, where the only barrier of entry are the blockchain transaction costs, then an individual's vote is proportional to the amount of capital they are willing to input into the ethics requirements. The ethics requirements voting system is fundamentally a "capitalocracy". But, on a platform that is competitive where labor drives efficiency, each individual can also "vote" with where they put their labor. If the capitalocracy ethics requirements does not agree with a significant population of the work force, then each individual has the freedom to choose a different set of ethics requirements to uphold. This then incentivizes the capitalocratic ethics requirements to closer align with the democratic ethics requirements in order to be most efficient by having a greater population of individuals for a more competitive workforce.

View Ethics Requirements Proposal
- The "Ethics Requirements Proposal ID" is the unique identifier for the ethics requirements proposal. It is preceded by the "#" character to indicate that it is an ethics requirements proposal.
- The "Proposal Hash" is the keccak256 hash value of the ethics requirements array of string data of the proposal.
- The "Proposal Validator Address" is the address of the user that submitted the ethics requirements proposal.
- The "Proposal Votes For" is the number of user votes for the current ethics requirements proposal. Each activated user can only make one vote for any given ethics requirements proposal, but a user can vote for multiple ethics requirements proposal. The only barrier of entry for a user to vote is for them to submit transactions to the blockchain to activate a user with an address and vote for an ethics requirements proposal.
- Click "Vote For Ethics Proposal" to submit a transaction to the blockchain to vote for the current ethics requirements proposal, if the current user has not already voted for this ethics requirements proposal.
- The ethics requirements are a list of strings. Each string should be a requirement that upholds some ethical standard that must be followed by all user content. The democratically voted ethics requirements are necessary to incentivize ethical users to participate Freelance Society to create a more competitive and efficient platform. Since users are anonymous, "democratic" does not mean each individual gets a vote, but that each user gets a vote. Since an individual can control multiple users, where the only barrier of entry are the blockchain transaction costs, then an individual's vote is proportional to the amount of capital they are willing to input into the ethics requirements. The ethics requirements voting system is fundamentally a "capitalocracy". But, on a platform that is competitive where labor drives efficiency, each individual can also "vote" with where they put their labor. If the capitalocracy ethics requirements does not agree with a significant population of the work force, then each individual has the freedom to choose a different set of ethics requirements to uphold. This then incentivizes the capitalocratic ethics requirements to closer align with the democratic ethics requirements in order to be most efficient by having a greater population of individuals for a more competitive workforce.
- Click "Save Locally" to save the ethics requirements proposal as a json file locally to your computer.
- Click "View Ethics Requirements Proposals" to redirect to the ethics requirements proposal search page.
- Click "View Ethics Requirements" to redirect to the most recent version of the ethics requirements page.
- Click "Add Ethics Requirements Proposal" to redirect to the add ethics requirements proposal page.

View Hash Task
- The "Task ID" is the unique identifier for the hash task.
- The "Hash Value" is the keccak256 hash of the 32 byte key value. The key value is what is obtained by the worker as the completion of the task.
- The "Task Hash" is the keccak256 hash of the zip file that you host. The data should be hosted by the manager at the endpoint "<BasePath>/Tasks/DoubleHashTasks/<TaskHash>/Task.zip". The <BasePath> must be present in the manager's comma separated list of links in the Users contract. The <TaskHash> should not be prefixed with "0x".
- The "Manager Address" is the address of the user that created the hash task.
- The "Reward" the reward value, in Wei, the worker gets for completing the task by successfully being the first worker to submit the key value before the task deadline.
- The "Deadline" is time, in UTC, when the task no longer accepts submissions. This time is checked in the contract code in reference to the block timestamp where a transaction is made. Users can no longer fund the task past the deadline time. Users who fund a task must wait until the deadline has passed to be able to withdraw their funds from the task, and only when the task has not been completed.
- The "Difficulty" is a number between 0 and 255. If the difficulty is 0, then any nonce value is acceptable in the hash task submission. If the difficulty value is greater, then the submission hash value concatenated with the user address when hashed with keccak256 should have a binary value with the number of preceding zeros that is at least as many as the difficulty value.
- The "Completed" tells whether the hash task has been completed by a user.
- The "Key Reveal" tells whether the manager of the task must reveal the 32 bytes key in order to withdraw their funds of the task. This allows workers to know that the manager is incentivized to reveal the solution of the task so they know whether or not the task would be able to be reasonably completable.
- Input "Fund Task Amount" is the amount, in Wei, that the user will be funding to the task.
- Input "Manager Key Reveal" is the field that displays to the manager of the task if the key reveal for the task is true. This input when taken the keccak256 must result in the task hash value for the manager to be able to withdraw their funds for the task.
- Click "Fund Task" to submit a transaction to the blockchain that will fund the current hash task with the amount in the "Fund Task Amount" field.
- Click "Withdraw Task Funds" for the user to withdraw all their funds to the task. The user can only withdraw the funds if the task deadline has passed. If the key reveal value for the task is true, then the manager must reveal the key to the task to be able to withdraw their funds to the task.
- Click "Auto Discover Task" to automatically search for a task sequentially through users and their corresponding links in order of their user activation time. Click "Skip Address" to view the links from another user, and click "Skip Link" to view other links from the same user.
- Click "Manually Discover Task" to search for the task through a specific user by their address.
- View the "Task Requirements" of the list of requirements that must be met in order to complete the hash task. The requirement ID, condition, and other data are described in each requirement section. The file tree of the task can be seen to the right. Click the toggle to open/close the task description.
- Click "Save Locally" to download the task ZIP locally to your computer if the task data has been discovered.
- Click "Upload Locally" to upload the task data to view.
- Click "Submit Task" to redirect to the hash task submission page.
- Click "View Hash Tasks" to redirect to the task search page, with the hash task search parameter input.
- Click "Add Hash Task" to redirect to the add hash task page.
- View the task file tree when the hash task has been discovered.

View Requirement
- The "Requirement ID" is the unique requirement and version ID with the requirement index on the left with a dash "-" separating the version on the right.
- The "Requirement Hash" is the keccak256 hash of the requirement ZIP file.
- The "Requirement Manager Address" is the address of the user that created the requirement version.
- Click "Auto Discover Requirement" to automatically search for the requirement sequentially through users and their corresponding links in order of their user activation time. Click "Skip Address" to view the links from another user, and click "Skip Link" to view other links from the same user.
- Click "Manually Discover Requirement" to search for the requirement proposal through a specific user by their address.
- View the requirement proposal data which can include requirement condition, labelled variables, intermediate variables, example specifications, and example answer sections. The file tree of the task can be seen to the right.
- Click "Save Locally" to download the requirement ZIP locally to your computer if the proposal data has been discovered.
- Click "Upload Locally" to upload the requirement data to view.
- Click "View Proposals" to redirect to the view requirement proposals page, with the current requirement index search parameter input.
- Click "View Versions" to redirect to the view requirements page, with the current requirement index search parameter input.
- Click "Add Requirement Proposal" to redirect to the add requirement proposal page.
- View the task file tree when the requirement proposal has been discovered.

View Requirement Proposal
- The "Requirement Proposal ID" is the unique requirement proposal ID with the requirement index on the left with an underscore "_" separating the proposal index on the right.
- The "Proposal Hash" is the keccak256 hash of the requirement proposal ZIP file.
- The "Proposal Manager Address" is the address of the user that created the requirement proposal.
- The "Proposal Votes For" is the number of users that have voted in favor of the requirement proposal.
- Click "Vote For Proposal" to submit a vote transaction for the current requirement proposal to the blockchain. A user can vote at most one time for a requirement proposal, but they can vote for multiple requirement proposals even for the same requirement index.
- Click "Auto Discover Requirement Proposal" to automatically search for the requirement proposal sequentially through users and their corresponding links in order of their user activation time. Click "Skip Address" to view the links from another user, and click "Skip Link" to view other links from the same user.
- Click "Manually Discover Requirement Proposal" to search for the requirement proposal through a specific user by their address.
- View the requirement proposal data which can include requirement condition, labelled variables, intermediate variables, example specifications, and example answer sections. The file tree of the task can be seen to the right.
- Click "Save Locally" to download the requirement proposal ZIP locally to your computer if the proposal data has been discovered.
- Click "Upload Locally" to upload the requirement proposal data to view.
- Click "View Proposals" to redirect to the view requirement proposals page, with the current requirement index search parameter input.
- Click "View Versions" to redirect to the view requirements page, with the current requirement index search parameter input.
- Click "Add Requirement Proposal" to redirect to the add requirement proposal page.
- View the task file tree when the requirement proposal has been discovered.

View User
- The "User Address" is the address of the user.
- The "User Name" is data presented by the user such as a (not necessarily unique) name.
- The "User Links" is the comma separated list of links to the user and user data.
- The "Lockout Code" is the 32 byte lockout code of the user to deactivate the address.
- The "Activation Status" is the activation status of the user address which is "Unactivated", "Activated", or "Deactivated".
- The "User Defined Data" contains data presented by the user at their hosted endpoint of one of their user links. This data is not recorded on the blockchain and are subject to change.
    - The "Minimum Commission" is the minimum commission value the user is willing to accept to validate a task.
    - The "Ethics Requirements Standards" are the ethics requirements that the user is willing to work, manage, or validate for a task.
    - The "Worker Tasks" are the list of tasks that the user claims to have completed as a worker.
    - The "Manager Tasks" are the list of tasks that the user claims to have created as a manager.
    - The "Validator Tasks" are the list of tasks that the user claims to have validated as a validator.
    - The "Validation Requirements Whitelist" are the requirements that the user is willing to validate. A null data type of this field means that the user is willing to validate for any requirement.
    - The "Available Validation Time" are the time constraints that the user is willing to validate.
- Toggle "Show only user initiated contract calls" to set whether or not to hide contract events that include the user address, but are not called by the user.
- Click "Search" to search using the data in the search bar input. If the search bar input is empty, then the recent user interactions will be searched. Filter the search by user address, hex data, string data, parameter names, or parameter values. Use "OverrideCurrentUserFilter" as the first keyword to search user interactions for all users.
- Click "Previous" to go to the previous search page.
- Click "Next" to go to the next search page.
- The list of user interactions is sorted by most recent interactions first. And there are at most 10 items on a search page.
- The user interaction item has the contract name in the left column, the user interaction data in the center column, and possibly a button to redirect to the corresponding item on the right column. The "Contract Initiator Address" is the address of the user that initiated the contract call that emitted the event. The "Block Index" is the block index of the contract call and event. The "Block Timestamp" is the block timestamp time, in UTC, of the contract call and event. The event name is shown with the event parameter names and corresponding values.

View Validator Task
- The "Task ID" is the unique identifier for the task.
- The "Task Hash" is the keccak256 hash of the task ZIP file.
- The "Specifications Count" is the number of specifications defined in the task specifications.
- The "Validation Time" is the timespan, in seconds, that a validator is allocated to evaluate a task submission. This is the timespan from the evaluation start time to the evaluation end time regardless of whether or not the block schedule is being used.
- The "Deadline" is the time, in UTC, when the validator task no longer accepts submissions and funds. Tasks can still be completed after the deadline if the task is evaluated as accepted during the task evaluation timespan. Funds can not be withdrawn from the task until all submission evaluation timespans have passed.
- The "Next Slot Time" is the time, in UTC, of the end of the currently last submission. If the validator task uses block schedule validation, then this is the minimum time that any new submission time window will start.
- The "Submissions Count" is the number of submissions for the current validator task.
- The "Evaluated Submissions Count" is the number of submissions that have been evaluated by validators.
- The "Block Validation" is whether there is a block schedule followed by the evaluation timespan window. If the "Block Schedule" is "TRUE", then the evaluation timespan windows between different submissions will not overlap, so each new submission start time will at least be after the end of the previous submission evaluation timespan window. If the "Block Schedule" is "FALSE", then the evaluation timespan windows between different submissions may overlap, so each new submission evaluation timespan window start time will be "Validation Delay" seconds after the timestamp of the submission transaction. The block schedule helps prevent validators to not be spammed by a flood of submissions that overload their ability to sufficiently evaluate them, but it can slow the evaluation of submissions. If the "Block Schedule" is "FALSE", this the task is vulnerable to validators being spammed by a flood of submissions that overload their ability to sufficiently evaluate them, but it can allow the timespan of submission evaluations to be shortened.
- The "Validation Delay" is the time in seconds from the timestamp of the task submission to the minimum time of the evaluation start time of the corresponding submission.
- The "Completed" is whether the task has been marked complete by a contract call as a result of an accepted submission by a validator or a withdraw task submission by default. The task can be completed in actuality even with the field shown as "FALSE" if the task has been defaulted.
- The "Task Defaulted" is whether the task has been defaulted as a result of the task submission evaluation time window being passed without any validator rejecting or accepting the submission.
- The "Manager Address" is the address of the user that created the task.
- The "Completion Index" is the submission index that completed the task within the list of submissions for the task. If the task has not yet been completed, then it will be displayed as "X".
- The "Completion Address" is the address of the worker that completed the task. If the task has not yet been completed, then it will be displayed as "X".
- The "Validators" is the list of validators that are able to evaluate any submission within the task, but only one validator may evaluate a single submission.
- The "Validator Commission" is the amount, in Wei, that a worker must input to the contract to be able to have their submission evaluated by a validator.
- The "Reward" is the amount, in Wei, that a worker receives upon completion of the validator task.
- Input "Fund Task Amount" with the amount, in Wei, that you would like to contribute to the task reward. You are always able to input more funds into the task reward as long as the deadline has not passed and the task has not been completed. If the task deadline and all submission timespan windows pass with the task still being incomplete, then you are able to withdraw all your funds.
- Click "Fund Task" to submit a transaction to the blockchain that will fund the current task with the amount in the "Fund Task Amount" field.
- Click "Withdraw Task Funds" for the user to withdraw all their funds to the task. The user can only withdraw the funds if the task deadline has passed and all task evaluation timespans have passed.
- Click "Auto Discover Task" to automatically search for a task sequentially through users and their corresponding links in order of their user activation time. Click "Skip Address" to view the links from another user, and click "Skip Link" to view other links from the same user.
- Click "Manually Discover Task" to search for the task through a specific user by their address.
- View the "Task Requirements" of the list of requirements that must be met in order to complete the hash task. The requirement ID, condition, and other data are described in each requirement section. The file tree of the task can be seen to the right. Click the toggle to open/close the task description.
- Click "Save Locally" to download the task ZIP locally to your computer if the task data has been discovered.
- Click "Upload Locally" to upload the task data to view.
- Click "Submit Task" to redirect to the hash task submission page.
- Click "View Task Submissions" to redirect to the view task submissions page for the current task.
- Click "View Validator Tasks" to redirect to the tasks search page with search parameter "v" to search for recent validator tasks.
- Click "Add Validator Task Submission" to redirect to the add validator task submission page for the current validator task.
- View the task file tree when the hash task has been discovered.

View Validator Task Submission
- The "Task ID" is the unique identifier for the task.
- The "Submission ID" is the unique identifier for the task submission. It is the validator task short name "v" on the left separated by a dash "-" with the task index in the center separated by a dash "-" with the submission index on the right.
- The "Worker Address" is the address of the worker that created the task submission.
- The "Submission Hash" is the keccak256 hash of the submission file for the task submission. 
- The "Validation Start Time" is the time, in UTC, of the start time of the submission evaluation timespan window.
- The "Current Time" is the current time, in UTC. It is updated every second.
- The "Validation End Time" is the time, in UTC, of the end time of the submission evaluation timespan window.
- The "Submission Status" is a description of the status of the submission. The possible states are "Completed", "Completed Defaulted", "Rejected", "Incomplete Unevaluated", "Waiting Evaluation", "Waiting For Evaluation Timespan", "Waiting For Previous Submission Evaluation", and "Unexpected Data".
- The "Submission Withdrawn" is whether the worker has withdrawn their submission completion or submission unevaluated Wei amount.
- The "Submissions Count" is the number of submissions for the current validator task.
- The "Evaluated Submissions Count" is the number of submissions that have been evaluated by validators.
- The "Requirements Count" is the number of requirement specifications for the task.
- The "Validators" is the list of validators that are able to evaluate any submission within the task, but only one validator may evaluate a single submission.
- The "Completed" is whether the task has been marked complete by a contract call as a result of an accepted submission by a validator or a withdraw task submission by default. The task can be completed in actuality even with the field shown as "FALSE" if the task has been defaulted.
- The "Task Defaulted" is whether the task has been defaulted as a result of the task submission evaluation time window being passed without any validator rejecting or accepting the submission.
- The "Validator Commission" is the amount, in Wei, that a worker must input to the contract to be able to have their submission evaluated by a validator.
- The "Reward" is the amount, in Wei, that a worker receives upon completion of the validator task.
- Click "Withdraw Submission Completion" to withdraw the task reward if the current submission is complete or complete defaulted. This can only be done if the current user matches the corresponding task submission worker address.
- Click "Withdraw Submission Unevaluated" to withdraw the task submission validator commission if the submission has not been rejected, and a preceding task submission has already completed the task. The worker can recover their commission fee for their submission if it has not and will not be evaluated.
- Click "Try download submission zip from worker" to try to access the submission ZIP file from one of the user endpoints in their comma separated list of links.
- Toggle ethics requirements checkbox to acknowledge that the task and task submission both follow all ethics requirements.
- Toggle "Requirement <index>" to switch between an acceptance "✓" of the requirement specification and a rejection of the requirement specification. The corresponding index of the requirement specification is listed in the row. All specifications must be accepted for the submission to be accepted as complete.
- Click "Submit Evaluation: REJECTED" to reject the current task submission. Click "Submit Evaluation: ACCEPTED" to accept the task submission as complete.
- Click "Auto Discover Task" to automatically search for the task sequentially through users and their corresponding links in order of their user activation time. Click "Skip Address" to view the links from another user, and click "Skip Link" to view other links from the same user.
- Click "Manually Discover Task" to search for the task through a specific user by their address.
- View task requirements after the task ZIP file has been uploaded. The task requirements are a list of requirement specifications each with an arrow that allows the user to toggle whether or not to show the requirement specification. Each requirement specification also displays the requirement version at the header. Each requirement specification also has the requirement specification condition with labelled variables in bold and intermediate variables in italics.
- Click "Save Locally" to download the task ZIP locally to your computer if the task data has been discovered.
- Click "Upload Locally" to upload the task data to view.
- Click "View Task" to redirect to the corresponding task for the current submission.
- Click "View Task Submissions" to redirect to the view task submissions page for the current task.
- Click "View Validator Tasks" to redirect to the tasks search page with search parameter "v" to search for recent validator tasks.
- Click "Add Validator Task Submission" to redirect to the add validator task submission page for the current validator task.
- View the task file tree when the hash task has been discovered.